/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
extern YYSTYPE yylval; //YYSTYPE

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char s[65536];

%}

/* Define regular expression label */
newline		[\n]
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
double      {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT_STATE STRING_STATE

/* Rules section */
%%

 /* Assignment */
"+="	{ return ASSIGN_ADD; }
"-="	{ return ASSIGN_SUB; }
"*="	{ return ASSIGN_MUL; }
"/="	{ return ASSIGN_DIV; }
"%="	{ return ASSIGN_MOD; }
"="		{ return ASSIGN; }

 /* Arithmetic */
"++"    { return INC; }
"--"    { return DEC; }
"+"     { return ADD; }
"-" 	{ return SUB; }
"*" 	{ return MUL; }
"/" 	{ return DIV; }
"%"     { return MOD; }

 /* Relational */
">="	{ return GE; }
"<="	{ return LE; }
"=="	{ return EQ; }
"!="	{ return NE; }
">"		{ return GT; }
"<"		{ return LT; }

 /* Logical */
"&&"	{ return AND; }
"||"	{ return OR; }

 /* Delimiters */
"("		{ return LB; }
")"		{ return RB; }
"{"		{ return LCB; }
"}"		{ return RCB; }

 /* Print Keywords */	
"print"		{ return PRINT; }
"println"	{ return PRINTLN; }

 /* Condition and Loop Keywords */
"if"		{ return IF; }
"else"		{ return ELSE; }
"for"		{ return FOR; }

 /* Declaration Keywords */
"var"		{ return VAR; }
"int"		{ return INT; }
"float32"	{ return FLOAT; }

 /* String Constant */
\" { 
    BEGIN STRING_STATE; 
    memset(s, 0, sizeof(s));
}
<STRING_STATE>[^"]* { 
    strcat(s, yytext);
}
<STRING_STATE>\\\" {
    strcat(s, yytext+1);
}
<STRING_STATE>\" { 
    BEGIN INITIAL; 
    yylval.s=strdup(s);
    return STRING; 
}

 /* Number Constant */
{integer}	{ 
    yylval.i=atoi(yytext); 
    return I_CONST; 
}
{double}	{ 
    yylval.f=atof(yytext); 
    return F_CONST; 
}

 /* C type Comment */
"/*"                    { BEGIN COMMENT_STATE; }
<COMMENT_STATE>[^*\n]+	{ }
<COMMENT_STATE>\n		{ }
<COMMENT_STATE>"*"		{ }
<COMMENT_STATE>"*/"		{ BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ }

 /* Variable ID */
{id}       { yylval.s=strdup(yytext); return ID; }

 /* others */

[\n]		{ return NEWLINE; }
[ \t]		{ } /* Ignore */
[^; \t] 	{ } /* Ignore other charactor sets */
<<EOF>>     { yylineno++; return MY_EOF; }

%%

int yywrap()
{
    return 1;
}